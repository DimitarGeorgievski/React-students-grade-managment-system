{"version":3,"sources":["components/LoginForm.tsx","components/GradeForm.tsx","components/GradeTable.tsx","components/navbar.tsx","components/FilterByStudent.tsx","App.tsx","AppContext.tsx","index.tsx"],"names":["LoginForm","_ref","onLogin","username","setUsername","useState","password","setPassword","role","setRole","React","createElement","className","onSubmit","e","preventDefault","htmlFor","type","id","value","onChange","target","required","subjects","GradeForm","onAddGrade","existingGrades","studentName","setStudentName","grade","setGrade","subject","setSubject","some","g","toLowerCase","alert","placeholder","map","subj","key","Number","min","max","GradeTable","grades","onUpdateGrade","onDeleteGrade","isTeacher","editingGradeId","setEditingGradeId","newGradeValue","setNewGradeValue","groupedGrades","reduce","acc","push","sortedGroupedGrades","Object","keys","sort","a","b","group","index","Fragment","handleGradeChange","parseInt","onClick","Navbar","onViewAllGrades","onFilterByStudent","FilterByStudent","onFilter","App","setGrades","isLoggedIn","setIsLoggedIn","currentView","setCurrentView","useEffect","savedGrades","localStorage","getItem","JSON","parse","updateGrade","updatedGrade","updatedGrades","setItem","stringify","deleteGrade","gradeToDelete","filter","handleLogout","viewAllGrades","filterByStudent","addNewGrade","name","newGrade","uuidv4","newGrades","handleLogin","AppContext","createContext","undefined","AppProvider","children","Provider","ReactDOM","createRoot","document","getElementById","render"],"mappings":"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","file":"static/js/main.04cd853f.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\n\r\ninterface LoginFormProps {\r\n  onLogin: (username: string, password: string, role: string) => void;\r\n}\r\nconst LoginForm: React.FC<LoginFormProps> = ({ onLogin }) => {\r\n  const [username, setUsername] = useState<string>(\"\");\r\n  const [password, setPassword] = useState<string>(\"\");\r\n  const [role, setRole] = useState<string>(\"parent\");\r\n  const handleSubmit = (e: React.FormEvent) => {\r\n    e.preventDefault();\r\n    onLogin(username, password, role);\r\n  };\r\n  return (\r\n    <form\r\n      className=\"max-w-sm mx-auto p-4 border border-gray-300 rounded\"\r\n      onSubmit={handleSubmit}\r\n    >\r\n      <div className=\"mb-4\">\r\n        <label\r\n          htmlFor=\"username\"\r\n          className=\"block text-sm font-medium text-gray-700\"\r\n        >\r\n          Име\r\n        </label>\r\n        <input\r\n          type=\"text\"\r\n          id=\"username\"\r\n          value={username}\r\n          onChange={(e) => setUsername(e.target.value)}\r\n          className=\"w-full mt-1 p-2 border border-gray-300 rounded\"\r\n          required\r\n        />\r\n      </div>\r\n      <div className=\"mb-4\">\r\n        <label\r\n          htmlFor=\"password\"\r\n          className=\"block text-sm font-medium text-gray-700\"\r\n        >\r\n          Пасворд\r\n        </label>\r\n        <input\r\n          type=\"password\"\r\n          id=\"password\"\r\n          value={password}\r\n          onChange={(e) => setPassword(e.target.value)}\r\n          className=\"w-full mt-1 p-2 border border-gray-300 rounded\"\r\n          required\r\n        />\r\n      </div>\r\n      <div className=\"mb-4\">\r\n        <label\r\n          htmlFor=\"role\"\r\n          className=\"block text-sm font-medium text-gray-700\"\r\n        >\r\n          Роља\r\n        </label>\r\n        <select\r\n          id=\"role\"\r\n          value={role}\r\n          onChange={(e) => setRole(e.target.value)}\r\n          className=\"w-full mt-1 p-2 border border-gray-300 rounded\"\r\n        >\r\n          <option value=\"parent\">Родител</option>\r\n          <option value=\"teacher\">Професор</option>\r\n        </select>\r\n      </div>\r\n      <button\r\n        type=\"submit\"\r\n        className=\"w-full bg-blue-500 text-white py-2 rounded\"\r\n      >\r\n        Логирај се\r\n      </button>\r\n    </form>\r\n  );\r\n};\r\nexport default LoginForm;\r\n","import React, { useState } from \"react\";\r\n\r\ninterface Grade {\r\n  studentName: string;\r\n  grade: number;\r\n  subject: string;\r\n}\r\n\r\ninterface Props {\r\n  onAddGrade: (grade: Grade) => void;\r\n  existingGrades: Grade[];\r\n}\r\n\r\nconst subjects = [\r\n  \"Математика\",\r\n  \"Економија\",\r\n  \"Физика\",\r\n  \"Програмирање\",\r\n  \"Веб Програмирање\",\r\n  \"Датабази\",\r\n  \"Компјутерски Мрежи\",\r\n];\r\n\r\nconst GradeForm: React.FC<Props> = ({ onAddGrade, existingGrades }) => {\r\n  const [studentName, setStudentName] = useState(\"\");\r\n  const [grade, setGrade] = useState<number>(1);\r\n  const [subject, setSubject] = useState(subjects[0]);\r\n  const handleSubmit = (e: React.FormEvent) => {\r\n    e.preventDefault();\r\n    const exists = existingGrades.some(\r\n      (g) =>\r\n        g.studentName.toLowerCase() === studentName.toLowerCase() &&\r\n        g.subject === subject &&\r\n        g.grade === grade\r\n    );\r\n    if (exists) {\r\n      alert(\"Оценката веќе постои за овој ученик и предмет.\");\r\n      return;\r\n    }\r\n    onAddGrade({ studentName, grade, subject });\r\n    setStudentName(\"\");\r\n    setGrade(1);\r\n    setSubject(subjects[0]);\r\n  };\r\n  return (\r\n    <form onSubmit={handleSubmit} className=\"max-w-md mx-auto space-y-4\">\r\n      <input\r\n        type=\"text\"\r\n        placeholder=\"Име на ученик\"\r\n        value={studentName}\r\n        onChange={(e) => setStudentName(e.target.value)}\r\n        required\r\n        className=\"w-full p-2 border rounded\"\r\n      />\r\n      <select\r\n        value={subject}\r\n        onChange={(e) => setSubject(e.target.value)}\r\n        className=\"w-full p-2 border rounded\"\r\n      >\r\n        {subjects.map((subj) => (\r\n          <option key={subj} value={subj}>\r\n            {subj}\r\n          </option>\r\n        ))}\r\n      </select>\r\n      <input\r\n        type=\"number\"\r\n        placeholder=\"Оценка (1-5)\"\r\n        value={grade}\r\n        onChange={(e) => setGrade(Number(e.target.value))}\r\n        required\r\n        min={1}\r\n        max={5}\r\n        className=\"w-full p-2 border rounded\"\r\n      />\r\n      <button\r\n        type=\"submit\"\r\n        className=\"w-full bg-blue-500 text-white p-2 rounded\"\r\n      >\r\n        Додади оценка\r\n      </button>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default GradeForm;\r\n","import React, { useState } from \"react\";\r\n\r\ninterface Grade {\r\n  id: string;\r\n  studentName: string;\r\n  grade: number;\r\n  subject: string;\r\n}\r\n\r\ninterface GradeTableProps {\r\n  grades: Grade[];\r\n  onUpdateGrade: (grade: Grade) => void;\r\n  onDeleteGrade: (grade: Grade) => void;\r\n  isTeacher: boolean;\r\n}\r\n\r\nconst GradeTable: React.FC<GradeTableProps> = ({\r\n  grades,\r\n  onUpdateGrade,\r\n  onDeleteGrade,\r\n  isTeacher,\r\n}) => {\r\n  const [editingGradeId, setEditingGradeId] = useState<string | null>(null);\r\n  const [newGradeValue, setNewGradeValue] = useState<number>(0);\r\n\r\n  const groupedGrades = grades.reduce(\r\n    (acc: { [key: string]: Grade[] }, grade) => {\r\n      if (!acc[grade.studentName]) {\r\n        acc[grade.studentName] = [];\r\n      }\r\n      acc[grade.studentName].push(grade);\r\n      return acc;\r\n    },\r\n    {}\r\n  );\r\n\r\n  const sortedGroupedGrades = Object.keys(groupedGrades).map((studentName) => {\r\n    const sortedGrades = groupedGrades[studentName].sort(\r\n      (a, b) => a.grade - b.grade\r\n    );\r\n    return {\r\n      studentName,\r\n      grades: sortedGrades,\r\n    };\r\n  });\r\n\r\n  const handleGradeChange = (value: number) => {\r\n    if (value < 1 || value > 5) {\r\n      alert(\"Мора да внесиш одценка од 1 до 5.\");\r\n    } else {\r\n      setNewGradeValue(value);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"overflow-x-auto shadow-md sm:rounded-lg\">\r\n      <table className=\"min-w-full text-sm text-left text-gray-500 dark:text-gray-400\">\r\n        <thead className=\"text-xs text-gray-700 uppercase bg-gray-50 dark:bg-gray-700 dark:text-gray-400\">\r\n          <tr>\r\n            <th className=\"px-6 py-3\">Student Name</th>\r\n            <th className=\"px-6 py-3\">Subject</th>\r\n            <th className=\"px-6 py-3\">Grade</th>\r\n            {isTeacher && <th className=\"px-6 py-3\">Actions</th>}\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {sortedGroupedGrades.map((group, index) => (\r\n            <React.Fragment key={index}>\r\n              {group.grades.map((grade) => (\r\n                <tr\r\n                  key={grade.id}\r\n                  className=\"bg-white border-b dark:bg-gray-800 dark:border-gray-700\"\r\n                >\r\n                  <td className=\"px-6 py-4\">{grade.studentName}</td>\r\n                  <td className=\"px-6 py-4\">{grade.subject}</td>\r\n                  <td className=\"px-6 py-4\">\r\n                    {editingGradeId === grade.id ? (\r\n                      <input\r\n                        type=\"number\"\r\n                        value={newGradeValue}\r\n                        onChange={(e) =>\r\n                          handleGradeChange(parseInt(e.target.value))\r\n                        }\r\n                        className=\"border px-2 py-1 w-20\"\r\n                      />\r\n                    ) : (\r\n                      grade.grade\r\n                    )}\r\n                  </td>\r\n                  {isTeacher && (\r\n                    <td className=\"px-6 py-4 space-x-4\">\r\n                      {editingGradeId === grade.id ? (\r\n                        <>\r\n                          <button\r\n                            onClick={() => {\r\n                              onUpdateGrade({\r\n                                ...grade,\r\n                                grade: newGradeValue,\r\n                              });\r\n                              setEditingGradeId(null);\r\n                            }}\r\n                            className=\"text-green-600 hover:text-green-900\"\r\n                          >\r\n                            Save\r\n                          </button>\r\n                          <button\r\n                            onClick={() => setEditingGradeId(null)}\r\n                            className=\"text-gray-600 hover:text-gray-900\"\r\n                          >\r\n                            Cancel\r\n                          </button>\r\n                        </>\r\n                      ) : (\r\n                        <>\r\n                          <button\r\n                            onClick={() => {\r\n                              setEditingGradeId(grade.id);\r\n                              setNewGradeValue(grade.grade);\r\n                            }}\r\n                            className=\"text-blue-600 hover:text-blue-900\"\r\n                          >\r\n                            Update\r\n                          </button>\r\n                          <button\r\n                            onClick={() => onDeleteGrade(grade)}\r\n                            className=\"text-red-600 hover:text-red-900\"\r\n                          >\r\n                            Delete\r\n                          </button>\r\n                        </>\r\n                      )}\r\n                    </td>\r\n                  )}\r\n                </tr>\r\n              ))}\r\n            </React.Fragment>\r\n          ))}\r\n        </tbody>\r\n      </table>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default GradeTable;\r\n","import React from \"react\";\r\n\r\ninterface NavbarProps {\r\n  onViewAllGrades: () => void;\r\n  onFilterByStudent: () => void;\r\n  onAddGrade: () => void;\r\n}\r\nconst Navbar: React.FC<NavbarProps> = ({\r\n  onViewAllGrades,\r\n  onFilterByStudent,\r\n  onAddGrade,\r\n}) => {\r\n  return (\r\n    <div className=\"bg-transparent p-4 mb-5 text-white flex justify-between\">\r\n      <button\r\n        onClick={onViewAllGrades}\r\n        className=\"px-4 py-2 rounded-2xl bg-blue-900\"\r\n      >\r\n        Види ги сите оценки\r\n      </button>\r\n      <button\r\n        onClick={onFilterByStudent}\r\n        className=\"px-4 py-2 rounded-2xl bg-blue-900\"\r\n      >\r\n        Филтрирај по ученик\r\n      </button>\r\n      <button\r\n        onClick={onAddGrade}\r\n        className=\"px-4 py-2 rounded-2xl bg-blue-900\"\r\n      >\r\n        Додај Оценка\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\nexport default Navbar;\r\n","// src/components/FilterByStudent.tsx\r\nimport React, { useState } from \"react\";\r\n\r\ninterface FilterByStudentProps {\r\n  onFilter: (studentName: string) => void;\r\n}\r\nconst FilterByStudent: React.FC<FilterByStudentProps> = ({ onFilter }) => {\r\n  const [studentName, setStudentName] = useState<string>(\"\");\r\n  const handleSubmit = (e: React.FormEvent) => {\r\n    e.preventDefault();\r\n    onFilter(studentName);\r\n  };\r\n  return (\r\n    <form\r\n      onSubmit={handleSubmit}\r\n      className=\"flex justify-center gap-3 items-center mb-4\"\r\n    >\r\n      <input\r\n        type=\"text\"\r\n        value={studentName}\r\n        onChange={(e) => setStudentName(e.target.value)}\r\n        placeholder=\"Внесете име на студент\"\r\n        className=\"input input-bordered border rounded-2xl p-1 text-center  w-full max-w-xs mb-2\"\r\n      />\r\n      <button\r\n        type=\"submit\"\r\n        className=\"btn btn-primary rounded-2xl w-32 h-8 bg-blue-500\"\r\n      >\r\n        Филтрирај\r\n      </button>\r\n    </form>\r\n  );\r\n};\r\nexport default FilterByStudent;\r\n","import React, { useState, useEffect } from \"react\";\nimport LoginForm from \"./components/LoginForm\";\nimport GradeForm from \"./components/GradeForm\";\nimport GradeTable from \"./components/GradeTable\";\nimport Navbar from \"./components/navbar\";\nimport FilterByStudent from \"./components/FilterByStudent\";\nimport { v4 as uuidv4 } from 'uuid';\n\ninterface Grade {\n  id: string;\n  studentName: string;\n  grade: number;\n  subject: string;\n}\n\nconst App: React.FC = () => {\n  const [grades, setGrades] = useState<Grade[]>([]);\n  const [isLoggedIn, setIsLoggedIn] = useState<boolean>(false);\n  const [role, setRole] = useState<string>(\"\");\n  const [currentView, setCurrentView] = useState<string>(\"\");\n  const [studentName, setStudentName] = useState<string>(\"\");\n\n  useEffect(() => {\n    const savedGrades = localStorage.getItem(\"grades\");\n    if (savedGrades) {\n      setGrades(JSON.parse(savedGrades));\n    }\n  }, []);\n\n  useEffect(() => {\n    if (isLoggedIn && role === \"parent\") {\n      setCurrentView(\"filterStudent\");\n    }\n  }, [isLoggedIn, role]);\n\n  const addGrade = (grade: Omit<Grade, \"id\">) => {\n    const newGrade = { ...grade, id: uuidv4() };\n    const newGrades = [...grades, newGrade];\n    setGrades(newGrades);\n    localStorage.setItem(\"grades\", JSON.stringify(newGrades));\n  };\n\n  const updateGrade = (updatedGrade: Grade) => {\n    const updatedGrades = grades.map((grade) =>\n      grade.id === updatedGrade.id ? updatedGrade : grade\n    );\n    setGrades(updatedGrades);\n    localStorage.setItem(\"grades\", JSON.stringify(updatedGrades));\n  };\n\n  const deleteGrade = (gradeToDelete: Grade) => {\n    const updatedGrades = grades.filter((g) => g.id !== gradeToDelete.id);\n    setGrades(updatedGrades);\n    localStorage.setItem(\"grades\", JSON.stringify(updatedGrades));\n  };\n\n  const handleLogin = (username: string, password: string, role: string) => {\n    if (role === \"parent\") {\n      const studentExists = grades.some(\n        (grade) => grade.studentName.toLowerCase() === username.toLowerCase()\n      );\n      if (studentExists && password === username) {\n        setIsLoggedIn(true);\n        setRole(\"parent\");\n        setStudentName(username);\n      } else {\n        alert(\"Грешно име или пасворд за студентот\");\n      }\n    } else if (role === \"teacher\") {\n      if (username === \"admin\" && password === \"admin\") {\n        setIsLoggedIn(true);\n        setRole(\"teacher\");\n      } else {\n        alert(\"Грешно име или пасворд за професор\");\n      }\n    }\n  };\n\n  const viewAllGrades = () => setCurrentView(\"viewAll\");\n  const filterByStudent = () => setCurrentView(\"filterStudent\");\n  const addNewGrade = () => setCurrentView(\"addGrade\");\n\n  const handleFilter = (name: string) => {\n    setStudentName(name);\n    setCurrentView(\"filterStudent\");\n  };\n\n  const handleLogout = () => {\n    setIsLoggedIn(false);\n    setRole(\"\");\n    setCurrentView(\"\");\n    setStudentName(\"\");\n  };\n\n  return (\n    <div className=\"container mx-auto p-4\">\n      {!isLoggedIn ? (\n        <LoginForm onLogin={handleLogin} />\n      ) : (\n        <>\n          <div className=\"flex justify-between items-center mb-6\">\n            <div>\n              <h1 className=\"text-2xl font-bold\">\n                {role === \"teacher\" ? \"Наставнички Панел\" : \"Родителски Панел\"}\n              </h1>\n              {role === \"parent\" && (\n                <p className=\"text-sm text-gray-600\">Студент: {studentName}</p>\n              )}\n            </div>\n            <button\n              onClick={handleLogout}\n              className=\"bg-red-500 text-white px-4 py-2 rounded-2xl\"\n            >\n              Одјави се\n            </button>\n          </div>\n\n          {role === \"teacher\" && (\n            <>\n              <Navbar\n                onViewAllGrades={viewAllGrades}\n                onFilterByStudent={filterByStudent}\n                onAddGrade={addNewGrade}\n              />\n              {currentView === \"filterStudent\" && (\n                <FilterByStudent onFilter={handleFilter} />\n              )}\n            </>\n          )}\n\n          {currentView === \"viewAll\" && (\n            <GradeTable\n              grades={grades}\n              onUpdateGrade={updateGrade}\n              onDeleteGrade={deleteGrade}\n              isTeacher={role === \"teacher\"}\n            />\n          )}\n\n          {currentView === \"filterStudent\" && (\n            <GradeTable\n              grades={grades.filter(\n                (grade) =>\n                  grade.studentName.toLowerCase() === studentName.toLowerCase()\n              )}\n              onUpdateGrade={updateGrade}\n              onDeleteGrade={deleteGrade}\n              isTeacher={role === \"teacher\"}\n            />\n          )}\n\n          {currentView === \"addGrade\" && (\n            <GradeForm onAddGrade={addGrade} existingGrades={grades} />\n          )}\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default App;\n","import React, { createContext, useState, useContext, ReactNode } from \"react\";\r\n\r\n// Интерфејс за податоците што сакаме да ги чуваме во контекстот\r\ninterface AppContextType {\r\n  isLoggedIn: boolean;\r\n  role: string;\r\n  studentName: string;\r\n  setIsLoggedIn: React.Dispatch<React.SetStateAction<boolean>>;\r\n  setRole: React.Dispatch<React.SetStateAction<string>>;\r\n  setStudentName: React.Dispatch<React.SetStateAction<string>>;\r\n}\r\nconst AppContext = createContext<AppContextType | undefined>(undefined);\r\ninterface AppProviderProps {\r\n  children: ReactNode;\r\n}\r\nexport const AppProvider: React.FC<AppProviderProps> = ({ children }) => {\r\n  const [isLoggedIn, setIsLoggedIn] = useState<boolean>(false);\r\n  const [role, setRole] = useState<string>(\"\");\r\n  const [studentName, setStudentName] = useState<string>(\"\");\r\n  return (\r\n    <AppContext.Provider\r\n      value={{\r\n        isLoggedIn,\r\n        role,\r\n        studentName,\r\n        setIsLoggedIn,\r\n        setRole,\r\n        setStudentName,\r\n      }}\r\n    >\r\n      {children}\r\n    </AppContext.Provider>\r\n  );\r\n};\r\nexport const useAppContext = (): AppContextType => {\r\n  const context = useContext(AppContext);\r\n  if (!context) {\r\n    throw new Error(\"useAppContext must be used within a AppProvider\");\r\n  }\r\n  return context;\r\n};\r\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport { AppProvider } from './AppContext';\n\nconst root = ReactDOM.createRoot(document.getElementById('root') as HTMLElement);\n\nroot.render(\n  <AppProvider>\n    <App />\n  </AppProvider>\n);\n"],"sourceRoot":""}